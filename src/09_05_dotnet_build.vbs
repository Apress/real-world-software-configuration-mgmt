'===============================================================================
'All programming code examples associated with Real World Software Configuration
'Management are copyright 2003 by Sean Kenefick unless otherwise automatically
'generated by a tool (in which case its copyright is held by the applicable
'tool vendor).
'===============================================================================

sExename = "dotNet_Build.vbs"
sFriendlyTitle = "Build Script for Stocks Suite"
sVersion = "1.0"
sCopyrightNotice = "This script is (c)2003 by S. Kenefick"
sSSPath = "C:\\VSS\win32"
sVisualStudio = "C:\PROGRAM FILES\MICROSOFT VISUAL STUDIO .NET\COMMON7\IDE\DEVENV.EXE"
sSourceDrive = "C:\"
sSourcePath = "SRC\STOCKS"
sSourcePathVSS = "$/src/stocks"
sCMVersionFilename = "CM_VERSION.TXT"
sTempFile = sSourceDrive + sSourcePath + "\TMP.TMP"
sCSProgfilePath = "SRC\STOCKS\REALTIMESTOCKS"
sCSProgfileVSS = "$/src/stocks/realtimestocks"
sCSProgfile = "AssemblyVersion.cs"
sBuildType = "Release"

bTest = false
For Each arg In WScript.Arguments
    if arg = "-h" then
        HelpOut()
        WScript.Quit(1)
    elseif arg = "-t" then
        bTest = true
        WScript.Echo 
        WScript.Echo "TEST ONLY MODE"
        WScript.Echo 
    elseif arg = "-maj" then
        bDoMajor = true
    elseif arg = "-min" then
        bDoMinor = true
    elseif arg = "-debug" then
        sBuildType = "DEBUG"
    end if
Next

Salutation

'Check to see if source directory exists -- if not, create it.
dim fso
set fso = CreateObject("Scripting.FileSystemObject")
CheckForFolderExistence sSourcePath

'Get full path of cmversion file for future use and then check it out.
sCMFilename = sSourceDrive + "\" + sSourcePath + "\" + sCMVersionFilename
CheckOut sCMVersionFilename, sSourceDrive + sSourcePath, sSourcePathVSS

'Get previous version numbers.
Dim bMajor
Dim bMinor
Dim iBuild
set objFile = fso.GetFile(sCMFilename)
if objFile.Size > 0 then
    set objReadFile = fso.OpenTextFile(sCMFilename, 1)
    do Until objReadFile.AtEndOfStream
        strLine = objReadFile.ReadLine
        if Instr(strLine, "Major") then
            iMajor = CInt(Right(strLine, len(StrLine) - 6))
        end if
        if Instr(strLine, "Minor") then
            iMinor = CInt(Right(strLine, len(StrLine) - 6))
        end if
        if Instr(strLine, "Build") then
            iBuild = CInt(Right(strLine, len(StrLine) - 6))
        end if
    loop    
    objReadFile.Close
else
    WScript.Echo "ERROR:  The CMVERSION file is empty.  Exiting!"
    WScript.Quit(1)
end if

'Display current versions
Wscript.Echo "Old version:  Major = " + CStr(iMajor)
Wscript.Echo "Old version:  Minor = " + CStr(iMinor)
Wscript.Echo "Old version:  Build = " + CStr(iBuild)

'Increment versions as necessary.
if bDoMajor = true then
    iMajor = iMajor + 1
elseif bDoMinor  = true then
    iMinor = iMinor + 1
else
    iBuild = iBuild + 1
end if 

'Display current versions
Wscript.Echo "New version:  Major = " + CStr(iMajor)
Wscript.Echo "New version:  Minor = " + CStr(iMinor)
Wscript.Echo "New version:  Build = " + CStr(iBuild)

Wscript.Echo  "Updating version numbers in " + sTempFile + "..."
if bTest = false then
    'Write cmversion file out to temp
    if not fso.FileExists(sTempFile) then
        fso.CreateTextFile(sTempFile)
    end if
    Set objWriteFile = fso.OpenTextFile(sTempFile, 2)
    objWriteFile.WriteLine("Major=" + CStr(iMajor))
    objWriteFile.WriteLine("Minor=" + CStr(iMinor))
    objWriteFile.WriteLine("Build=" + CStr(iBuild))
    objWriteFile.Close

    'Save the previous version as a "bak" file and rename the tmp version.
    if fso.FileExists(sCMFilename + ".bak") then
        fso.DeleteFile(sCMFilename + ".bak")
    end if
    fso.MoveFile sCMFilename , sCMFilename + ".bak"
    fso.MoveFile sTempFile, sCMFilename
end if
    
'Print status information.
sBuildLabel = CStr(iMajor) + "." + CStr(iMinor) + "." + CStr(iBuild) + ".0"
WScript.Echo "New build number = " + sBuildLabel

'Check in CMVERSION.
CheckIn sCMVersionFilename, sSourceDrive + sSourcePath, sSourcePathVSS

'Update CSPROG file.  First check to make sure the CSProg's directory
'exists!
CheckForFolderExistence sCSProgfilePath

'Check out the CSPROG file.
sCSProgFullPath = sSourceDrive + "\" + sCSProgfilePath
CheckOut sCSProgfile, sCSProgFullPath, sCSProgfileVSS

'Update the CSPROG file with the new build number
if bTest = false then

    WScript.Echo "Updating CSPROG file with new versions..."
    if bTest = false then
        set objFile = fso.GetFile(sCSProgFullPath + "\" + sCSProgfile)
        if objFile.Size > 0 then
            set objReadFile = fso.OpenTextFile(sCSProgFullPath + "\" + sCSProgfile, 1)
            if not fso.FileExists(sTempFile) then
                fso.CreateTextFile(sTempFile)
            end if
            set objWriteFile = fso.OpenTextFile(sTempFile, 2)
            do Until objReadFile.AtEndOfStream
                strLine = objReadFile.ReadLine
                if Instr(strLine, "AssemblyVersion") then
                    objWriteFile.WriteLine("[assembly: AssemblyVersion(" + Chr(34) + sBuildLabel + Chr(34) + ")]")
                else
                    objWriteFile.WriteLine(strLine)                        
                end if
            loop    
            objReadFile.Close
            objWriteFile.Close
        else
            WScript.Echo "ERROR:  The CSPROG file is empty or doesn't exist.  Exiting!"
            WScript.Quit(1)
        end if
    end if

    'Copy the temp file to the orig
    'Save the previous version as a "bak" file and rename the tmp version.
    if fso.FileExists(sCSProgFullPath + "\" + sCSProgfile + ".bak") then
        fso.DeleteFile(sCSProgFullPath + "\" + sCSProgfile + ".bak")
    end if
    fso.MoveFile sCSProgFullPath + "\" + sCSProgfile, sCSProgFullPath + "\" + sCSProgfile + ".bak"
    fso.MoveFile sTempFile, sCSProgFullPath + "\" + sCSProgfile

end if

'Check in the CSPROG file.
CheckIn sCSProgfile, sCSProgFullPath, sCSProgfileVSS

'Label source.
FullFillCommand(Chr(34) + sSSPath + "\ss.exe" + Chr(34) + " Label " + Chr(34) + sSourcePathVSS + Chr(34) + " -L" + Chr(34) + sBuildLabel + Chr(34) + " -I-")

'Get source from label.
if bTest = false then
    Set objShell = WScript.CreateObject("WScript.Shell")
    objShell.CurrentDirectory = sSourceDrive + "\" + sSourcePath
end if
FullFillCommand(Chr(34) + sSSPath + "\ss.exe" + Chr(34) + " Get " + Chr(34) + sSourcePathVSS + Chr(34) + " -I- -W - -VL" + Chr(34) + sBuildLabel + Chr(34)+ " -R")
    
'Build
FullFillCommand(Chr(34) + sVisualStudio + Chr(34) + " " + Chr(34) + sSourceDrive + sSourcePath + "\" + "STOCKS.SLN" + Chr(34) + " /build " + sBuildType)
    
'End Script.
WScript.Echo "******************************************************************"
WScript.Echo "END SCRIPT"
WScript.Echo "******************************************************************"


sub HelpOut
    'Help.
    Salutation
    WScript.Echo "Usage:  " & s_exename & " (-t) (-h) (-maj|-min)"
    WScript.Echo "        -t              Test mode only."
    WScript.Echo "        -h              Show help screen."
    WScript.Echo "        -maj            This will increment the major number if"
    WScript.Echo "                        listed."
    WScript.Echo "        -min            This will increment the minor number if"
    WScript.Echo "                        listed."
    WScript.Echo "        -debug          This will create a debug version of the"
    WScript.Echo "                        software. The default is a release version."
end sub

sub Salutation
    'Salutation.
    WScript.Echo "******************************************************************"
    WScript.Echo sFriendlyTitle & " " & sVersion
    WScript.Echo sCopyrightNotice
    WScript.Echo "******************************************************************\n"
end sub

sub CheckOut(sCheckoutFile, sSourcePath, sSourcePathVSS)
    ¿SourceSafe will only check out from the current directory unless ¿GL
    ¿parameter is set.  But sometimes SourceSafe is flakey even with -GL 
    ¿so let's set the path manually
    Set objShell = WScript.CreateObject("WScript.Shell")
    objShell.CurrentDirectory = sSourcePath
    if bTest = false then
        'Check out the file, -I- for no interaction, -GRW to overwrite if it exists
        FullFillCommand(Chr(34) + sSSPath + "\ss.exe" + Chr(34) + " CheckOut " + sSourcePathVSS + "/" + sCheckoutFile + " -I- -GWR -GL" + Chr(34) + sSourcePath + Chr(34))
        'Ensure file exists.  If the file was already checked out, VSS will not
        'have allowed it to get copied out to the filesystem so you may have to GET it.
        set fso = CreateObject("Scripting.FileSystemObject")
        if (not fso.FolderExists(sSourceDrive + "\" + sSourcePath)) then
            FullFillCommand(Chr(34) + sSSPath + "\ss.exe" + Chr(34) + " Get " + sSourcePathVSS + "/" + sCheckoutFile + " -I- -W -GL" + Chr(34) + sSourcePath + Chr(34))
        end if
    end if
end sub

sub CheckIn(sCheckoutFile, sSourcePath, sSourcePathVSS)
    ¿SourceSafe will only check in from the current directory unless ¿GL
    ¿parameter is set.  But sometimes SourceSafe is flakey even with -GL 
    ¿so let's set the path manually
    Set objShell = WScript.CreateObject("WScript.Shell")
    objShell.CurrentDirectory = sSourcePath
    if bTest = false then
        'Check in file.
        FullFillCommand(Chr(34) + sSSPath + "\ss.exe" + Chr(34) + " CheckIn " + sSourcePathVSS + "/" + sCheckoutFile + " -I- -W")
    end if
end sub

sub FullFillCommand(sCommand)
    WScript.Echo "Fulfilling command: " + sCommand
    if bTest = false then
        Set objShell = WScript.CreateObject("WScript.Shell")
        Set objExecObject = objShell.Exec(sCommand)
        Do While Not objExecObject.StdOut.AtEndOfStream
            strText = objExecObject.StdOut.ReadLine()
            Wscript.Echo strText
        Loop
    end if
end sub

'This function assumes the folder will be created on the "source drive"
sub CheckForFolderExistence(sFolder)
    WScript.Echo sFolder
    WScript.Echo sParentFolder
    dim fso
    set fso = CreateObject("Scripting.FileSystemObject")
    if (not fso.FolderExists(sParentFolder + "\" + sFolder)) then
        WScript.Echo "Now creating the " + sFolder + " directory folder..."
        if bTest = false then
            set objShell = CreateObject("Shell.Application")
            set objFolder = objShell.NameSpace(sSourceDrive)
            objFolder.NewFolder sFolder
        end if
    else
        WScript.Echo sFolder + " directory already exists..."    
    end if            
end sub
