#!/usr/bin/perl

#===============================================================================
#All programming code examples associated with Real World Software Configuration
#Management are copyright 2003 by Sean Kenefick unless otherwise automatically
#generated by a tool (in which case its copyright is held by the applicable
#tool vendor).
#===============================================================================

##############################################

$exename = "dotNet_Build.pl";
$friendly_title = "Build Script for Stocks Suite";
$version = "1.0";
$copyright_notice = "This script is (c)2003 by S. Kenefick";
$SS_path = "C:\\PROGRAM FILES\\MICROSOFT VISUAL STUDIO\\VSS\\win32";
$visual_studio = "C:\\PROGRAM FILES\\MICROSOFT VISUAL STUDIO .NET\\COMMON7\\IDE\\DEVENV.EXE";
$source_path = "C:\\SRC\\STOCKS";
$source_path_VSS = "\$/src/stocks";
$cmversion_filename = "CM_VERSION.TXT";
$temp_file = "$SOURCE_PATH" . "\\TMP.TMP";
$csprogfile_path = "C:\\SRC\\STOCKS\\REALTIMESTOCKS";
$csprogfile_VSS = "\$/src/stocks/realtimestocks";
$csprogfile = "AssemblyVersion.cs";
$build_type = "RELEASE";

MAIN:
{
    #Determine command line arguments.
    foreach $command (@ARGV)
    {
        if ($command eq '-h')
        {
            HelpOut();
            exit;
        }       
        elsif ($command eq '-t')
        {
            $test = 1;
            print ("\n\nTEST ONLY MODE\n\n");
        }       
        elsif ($command eq '-maj')
        {
            $do_major = -1;
        }       
        elsif ($command eq '-min')
        {
            $do_minor = -1;
        }
        elsif ($command eq '-debug')
        {
            $build_type = "DEBUG";
        }
        $i++;
    }

    Salutation();
    
    #Check to see if source directory exists -- if not, create it.
    if (not -e "$source_path")
    {
        print "Creating directory: $source_path\n";
        if ($test ne 1)
        {
            mkdir($source_path);
        }
    }
    
    #Get full path of cmversion file for future use and then check it out.
    $cm_filename = "$source_path" . "\\$cmversion_filename";
    CheckOut($cmversion_filename, $source_path, $source_path_VSS);

    #Get previous version numbers.
    open (IN, "$cm_filename");
    while (<IN>)
    {
        if (/Major/)
        {
            if (/\d+/)
            {
                $major = $&;
            }
        }
        if (/Minor/)
        {
            if (/\d+/)
            {
                $minor = $&;
            }
        }
        if (/Build/)
        {
            if (/\d+/)
            {
                $build = $&;
            }
        }
    }
    close(IN);

    #Display old version number.
    if ($test == 1)
    {
        print "Old build number = $major.$minor.$build.0\n";
        print "CMVERSION.TXT file = $cm_filename\n";
        print "TEMP file = $temp_file\n";
        print "CSPROG file = $csprogfile\n";
    }
    
    #Increment versions as necessary.
    if ($do_major eq -1)
    {
        $major++;
    }
    elsif ($do_minor eq -1)
    {
        $minor++;
    }
    else
    {
        $build++;
    }
    
    print "\nUpdating version numbers in $temp_file...\n";
    if ($test != 1)
    {
        #Write cmversion file out.
        open (OUT, "> $temp_file") or die("There was an error writing to $temp_file  (1).  Do you have rights to the drive?  ENDING...");
        print OUT "Major=$major\nMinor=$minor\nBuild=$build" or die("There was an error writing to $temp_file (2).  Is the file read-only?  ENDING...");
        close(OUT);
        
        #Save the previous version as a "bak" file and rename the tmp version.
        rename ("$cm_filename", "$cm_filename" . ".bak") or die("There was an error renaming $cm_filename.  Is it read-only?  ENDING...");
        rename ("$temp_file", "$cm_filename") or die("There was an error renaming $temp_file.  Is it read-only?  ENDING...");
    }

    #Print status information.
    $build_label = "$major.$minor.$build.0";
    print "New build number = $build_label\n";
    
    #Check in CMVERSION.
    CheckIn($cmversion_filename, $source_path, $source_path_VSS);

    #Check out the CSPROG file.
    CheckOut($csprogfile, $csprogfile_path, $csprogfile_VSS);
    
    #Update CSPROG file.
    print "\nUpdating CSPROG file with new versions...\n";
    if ($test != 1)
    {
        open (IN, "$csprogfile_path" ."\\$csprogfile");
        open (OUT, "> $temp_file") or die("There was an error writing to $temp_file (1).  Do you have rights to the drive?  ENDING...");
        while (<IN>)
        {
            if (/AssemblyVersion/)
            {
                print OUT "[assembly: AssemblyVersion(\"$build_label\")]"
            }
            else
            {
                print OUT $_;
            }
        }
        close(OUT);
        close(IN);        
        
        #Save the previous version as a "bak" file and rename the tmp version.
        rename ("$csprogfile_path\\$csprogfile", "$csprogfile_path\\$csprogfile" . ".bak") or die("There was an error renaming $csprogfile.  Is it read-only?  ENDING...");
        rename ("$temp_file", "$csprogfile_path\\$csprogfile") or die("There was an error renaming $temp_file.  Is it read-only?  ENDING...");
    }
    
    #Check in new CSPROG file.
    FullFillCommand("\"$SS_path\\ss.exe\" CheckIn \"$csprogfile_VSS\\$csprogfile\" -I- -W");

    #Label source.
    FullFillCommand("\"$SS_path\\ss.exe\" Label \$/src -L\"$build_label\" -I-");

    #Get source from label.
    chdir($source_path);
    FullFillCommand("\"$SS_path\\ss.exe\" Get \"$source_path_VSS\" -I- -W - -VL\"$build_label\" -R");
    
    #Build
    FullFillCommand("\"$visual_studio\" \"$source_path\\STOCKS.SLN\" /build $build_type");
    
    #End Script.
    print "******************************************************************\n";
    print "END SCRIPT\n";
    print "******************************************************************\n";
}

sub CheckOut
{
    my($checkout_file) = $_[0];
    my($source_path) = $_[1];
    my($source_path_VSS) = $_[2];

    #Make sure your directory exists.
    if (not -e "$source_path")
    {
        print "Creating directory: $source_path\n";
        if ($test ne 1)
        {
            mkdir($source_path);
        }
    }

    #SourceSafe will only check out to the current directory unless ¿GL
    #parameter is set.  But sometimes SourceSafe is flakey even with -GL 
    #so let's set the path manually
    chdir($source_path);

    #Check out the file, -I- for no interaction, -GRW to overwrite if it exists
    FullFillCommand("\"$SS_path\\ss.exe\" CheckOut \"$source_path_VSS\\$checkout_file\" -I- -GWR -GL\"$source_path\"" or die("Error checking out checkout_file file."));
        
    #Ensure file exists.  If the file was already checked out, VSS will not
    #have allowed it to get copied out to the filesystem so you may have to GET it.
    if ($test ne 1)
    {
        if (not -e "$source_path\\$checkout_file")
        {
            FullFillCommand("\"$SS_path\\ss.exe\" Get \"$source_path_VSS\\$checkout_file\" -I- -W -GL\"$source_path\"");
        }
    }
}
    
sub CheckIn
{
    my($checkout_file) = $_[0];
    my($source_path) = $_[1];
    my($source_path_VSS) = $_[2];

    #SourceSafe will only check in from the current directory unless ¿GL
    #parameter is set.  But sometimes SourceSafe is flakey even with -GL 
    #so let's set the path manually
    chdir($source_path);

    #Check in file.
    FullFillCommand("\"$SS_path\\ss.exe\" CheckIn \"$source_path_VSS\\$checkout_file\" -I- -W");
}

sub FullFillCommand
{
    my($command) = $_[0];
    print "Fulfilling command:  $command\n";
    if ($test ne 1)
    {
        system("$command");    
    }    
}

sub HelpOut
{
    #Help.
    $msg_Param[0] = "\nUsage:  $exename [-t] [-h] [-maj|-min] cm_filename";
    $msg_Param[1] = "        -t              Test mode only.";
    $msg_Param[2] = "        -h              Show help screen.";
    $msg_Param[3] = "        -maj            This will increment the major number if";
    $msg_Param[4] = "                        listed.";
    $msg_Param[5] = "        -min            This will increment the minor number if";
    $msg_Param[6] = "                        listed.";
    $msg_Param[7] = "        -debug          This will create a debug version of the";
    $msg_Param[8] = "                        software. The default is a release version.";
    
    Salutation();
    foreach $msg (@msg_Param)
    {
        $sHelpMessage = $sHelpMessage . $msg . "\n";
    }
    $sHelpMessage = $sHelpMessage;
    print $sHelpMessage;
}

sub Salutation
{
    #Salutation.
    print "\n******************************************************************\n";
    print "$friendly_title $version\n";
    print "$copyright_notice\n";
    print "******************************************************************\n";
}

